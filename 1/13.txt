(ns mire.commands
  (:require [clojure.string :as str]
            [mire.rooms :as rooms]
            [mire.player :as player]))

(defn- move-between-refs
  "Move one instance of obj between from and to. Must call in a transaction."
  [obj from to]
  (alter from disj obj)
  (alter to conj obj))

;; Command functions

(defn look
  "Get a description of the surrounding environs and its contents."
  []
  (str (:desc @player/*current-room*)
       "\nExits: " (keys @(:exits @player/*current-room*)) "\n"
       (str/join "\n" (map #(str "There is " % " here.\n")
                           @(:items @player/*current-room*)))
        (str/join "\n" (map #(str % " in this room.") 
                                  (disj @(:inhabitants @player/*current-room*) player/*name*)))))

(defn move
  "\"♬ We gotta get out of this place... ♪\" Give a direction."
  [direction]
  (dosync
   (let [target-name ((:exits @player/*current-room*) (keyword direction))
         target (@rooms/rooms target-name)]
     (if target
       (do
         (move-between-refs player/*name*
                            (:inhabitants @player/*current-room*)
                            (:inhabitants target))
         (ref-set player/*current-room* target)
         (look))
       "You can't go that way."))))

(defn grab
  "Pick something up."
  [thing]
  (dosync
   (if (rooms/room-contains? @player/*current-room* thing)
     (do (move-between-refs (keyword thing)
                            (:items @player/*current-room*)
                            player/*inventory*)
         (str "You picked up the " thing "."))
     (str "There isn't any " thing " here."))))

(defn discard
  "Put something down that you're carrying."
  [thing]
  (dosync
   (if (player/carrying? thing)
     (do (move-between-refs (keyword thing)
                            player/*inventory*
                            (:items @player/*current-room*))
         (str "You dropped the " thing "."))
     (str "You're not carrying a " thing "."))))

(defn inventory
  "See what you've got."
  []
  (str "You are carrying:\n"
       (str/join "\n" (seq @player/*inventory*))))

(defn detect
  "If you have the detector, you can see which room an item is in."
  [item]
  (if (@player/*inventory* :detector)
    (if-let [room (first (filter #((:items %) (keyword item))
                                 (vals @rooms/rooms)))]
      (str item " is in " (:name room))
      (str item " is not in any room."))
    "You need to be carrying the detector for that."))

(defn pet
  "If you have an animal, you can pet it."  
  [animal]  
  (let [animal-key (keyword animal)]  
    (if (contains? #{:bunny :turtle} animal-key)  
      (if (@player/*inventory* animal-key)
        (str "You pet the " animal "."  
        (doseq [inhabitant (disj @(:inhabitants @player/*current-room*)
                             player/*name*)]
            (binding [*out* (player/streams inhabitant)]
                (println (str player/*name* " pet the " animal))
                (println player/prompt))))
        (str "You dont have " animal " in inventory."))  
     "You cant pet that."))) 
(defn say
  "Say something out loud so everyone in the room can hear."
  [& words]
  (let [message (str/join " " words)]
    (doseq [inhabitant (disj @(:inhabitants @player/*current-room*)
                             player/*name*)]
      (binding [*out* (player/streams inhabitant)]
        (println (str player/*name* ": " message))
        (println player/prompt)))
    (str "You: " message)))

(defn game-time []
    (let [current-time (System/currentTimeMillis) 
        elapsed-sec (quot (- current-time *game-start-time*) 1000)
        minutes (quot elapsed-sec 60)
        seconds (rem elapsed-sec 60)]
        (str "You game " minutes " minutes " seconds " seconds)))

(defn give
  "Give an item to another player in the same room."
  [item recipient]
  (dosync
   (let [item-key (keyword item)
         current-room @player/*current-room*
         inhabitants @(:inhabitants current-room)
         recipient-inv (rooms/get-player-inventory recipient)]
     (cond
       (not (player/carrying? item))
         (str "You're not carrying a " item ".")
       
       (not (contains? inhabitants recipient))
         (str recipient " is not in this room.")
       
       (nil? recipient-inv)
         (str "Cannot give item to " recipient ".")
       
       :else
         (do
           (alter player/*inventory* disj item-key)
           (alter recipient-inv conj item-key)
           (doseq [inhabitant (disj inhabitants player/*name*)]
             (when-let [out (player/streams inhabitant)]
               (binding [*out* out]
                 (when (= inhabitant recipient)
                   (println (str player/*name* " gave you " item ".")))
                 (println (str player/*name* " gave " item " to " recipient "."))
                 (println player/prompt))))
           (str "You gave " item " to " recipient "."))))))


(defn help
  "Show available commands and what they do."
  []
  (str/join "\n" (map #(str (key %) ": " (:doc (meta (val %))))
                      (dissoc (ns-publics 'mire.commands)
                              'execute 'commands))))

;; Command data

(def commands {"move" move,
               "north" (fn [] (move :north)),
               "south" (fn [] (move :south)),
               "east" (fn [] (move :east)),
               "west" (fn [] (move :west)),
               "grab" grab
               "discard" discard
               "inventory" inventory
               "detect" detect
               "look" look
               "say" say
               "pet" pet
               "help" help
               "time" game-time
               "give" give})

;; Command handling

(defn execute
  "Execute a command that is passed to us."
  [input]
  (try (let [[command & args] (.split input " +")]
         (apply (commands command) args))
       (catch Exception e
         (.printStackTrace e (new java.io.PrintWriter *err*))
         "You can't do that!")))
