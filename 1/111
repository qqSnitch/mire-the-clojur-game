(defn drink
  "Drink a potion or poison."
  [item]
  (dosync
   (if (player/carrying? item)
     (cond
       (= (keyword item) :poison)
       (do
         (alter player/*inventory* disj (keyword item))
         (doseq [inhabitant @(:inhabitants @player/*current-room*)]
           (when-let [out (player/streams inhabitant)]
             (binding [*out* out]
               (println (str player/*name* " drank poison and died horribly!"))
               (println player/prompt))))
         :dead) ; Возвращаем специальное значение для обработки в execute
       :else
       (str "You drank the " item ". It has no effect."))
     (str "You're not carrying a " item "."))))

;; Обновим commands map:
(def commands {"move" move,
               "north" (fn [] (move :north)),
               "south" (fn [] (move :south)),
               "east" (fn [] (move :east)),
               "west" (fn [] (move :west)),
               "grab" grab
               "discard" discard
               "inventory" inventory
               "detect" detect
               "look" look
               "say" say
               "pet" pet
               "help" help
               "give" give
               "drink" drink})

;; Обновим функцию execute для обработки случая смерти:
(defn execute
  "Execute a command that is passed to us."
  [input]
  (try (let [[command & args] (.split input " +")
             result (apply (commands command) args)]
         (if (= result :dead)
           (do
             (println "You died from poisoning!")
             :dead) ; Возвращаем :dead для обработки в server.clj
           result))
       (catch Exception e
         (.printStackTrace e (new java.io.PrintWriter *err*))
         "You can't do that!"))



(defn- mire-handle-client [in out]
  (binding [*in* (io/reader in)
            *out* (io/writer out)
            *err* (io/writer System/err)]

    ;; We have to nest this in another binding call instead of using
    ;; the one above so *in* and *out* will be bound to the socket
    (print "\nWhat is your name? ") (flush)
    (binding [player/*name* (get-unique-player-name (read-line))
              player/*current-room* (ref (@rooms/rooms :start))
              player/*inventory* (ref #{})]
      (dosync
       (commute (:inhabitants @player/*current-room*) conj player/*name*)
       (commute player/streams assoc player/*name* *out*))

      (println (commands/look)) (print player/prompt) (flush)

      (try (loop [input (read-line)]
             (when input
               (let [result (commands/execute input)]
                 (when-not (= result :dead)
                   (println result)
                   (.flush *err*)
                   (print player/prompt) (flush)
                   (recur (read-line)))))
           (finally (cleanup))))))



